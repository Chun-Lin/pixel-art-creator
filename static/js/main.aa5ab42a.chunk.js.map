{"version":3,"sources":["Canvas.jsx","App.js","serviceWorker.js","index.js"],"names":["Canvas","width","height","rowsNumber","columnsNumber","pixelColor","setPixelImageDataUri","canvasRef","useRef","useEffect","ctx","current","getContext","fillStyle","fillRect","strokeStyle","lineWidth","i","x","beginPath","moveTo","lineTo","stroke","y","handleMouseMove","event","newPosX","clientX","getBoundingClientRect","left","newPosY","clientY","top","endX","offsetWidth","endY","offsetHeight","pixelSize","indexX","Math","floor","indexY","toDataURL","handleMouseUp","document","removeEventListener","ref","style","background","onMouseDown","addEventListener","App","useState","pixelImageDataUri","setPixelColor","memoizedSetPixelImageDataUri","useMemo","className","onChangeComplete","color","hex","href","download","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMA4FeA,G,OA1FA,SAAC,GAOT,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,OAKI,IAJJC,kBAII,MAJS,GAIT,MAHJC,qBAGI,MAHY,GAGZ,EAFJC,EAEI,EAFJA,WACAC,EACI,EADJA,qBAEMC,EAAYC,iBAAO,MAEzBC,qBAAU,WACR,IAAMC,EAAMH,EAAUI,QAAQC,WAAW,MACzCF,EAAIG,UAAY,QAChBH,EAAII,SAAS,EAAG,EAAGb,EAAOC,GAE1BQ,EAAIK,YAAc,QAClBL,EAAIM,UAAY,EAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAYc,IAAK,CACnC,IAAMC,EAAID,GAAKhB,EAAQE,GACvBO,EAAIS,YACJT,EAAIU,OAAOF,EAAG,GACdR,EAAIW,OAAOH,EAAGhB,GACdQ,EAAIY,SAGN,IAAK,IAAIL,EAAI,EAAGA,EAAIb,EAAea,IAAK,CACtC,IAAMM,EAAIN,GAAKhB,EAAQG,GACvBM,EAAIS,YACJT,EAAIU,OAAO,EAAGG,GACdb,EAAIW,OAAOpB,EAAOsB,GAClBb,EAAIY,YAEL,CAAClB,EAAeF,EAAQK,EAAWJ,EAAYF,IAElD,IAAMuB,EAAkB,SAAAC,GACtB,IAAIC,EAAUD,EAAME,QAAUpB,EAAUI,QAAQiB,wBAAwBC,KACpEC,EAAUL,EAAMM,QAAUxB,EAAUI,QAAQiB,wBAAwBI,IAGlEC,EAAO1B,EAAUI,QAAQuB,YACzBC,EAAO5B,EAAUI,QAAQyB,aAE3BV,EAJU,IAKZA,EAAU,GAGRI,EARU,IASZA,EAAU,GAGRJ,EAAUO,IACZP,EAAUO,GAGRH,EAAUK,IACZL,EAAUK,GAGZ,IAAME,EAAYpC,EAAQE,EACpBmC,EAASC,KAAKC,MAAMd,EAAUW,GAC9BI,EAASF,KAAKC,MAAMV,EAAUO,GAE9B3B,EAAMH,EAAUI,QAAQC,WAAW,MACzCF,EAAIG,UAAYR,EAChBK,EAAII,SAASwB,EAASD,EAAWI,EAASJ,EAAWA,EAAWA,GAChE/B,EAAqBC,EAAUI,QAAQ+B,UAAU,eAG7CC,EAAgB,SAAhBA,IACJC,SAASC,oBAAoB,UAAWF,GACxCC,SAASC,oBAAoB,YAAarB,IAQ5C,OACE,4BACEsB,IAAKvC,EACLN,MAAOA,EACPC,OAAQA,EACR6C,MAAO,CAAEC,WAAY,SACrBC,YAXoB,WACtBL,SAASM,iBAAiB,YAAa1B,GACvCoB,SAASM,iBAAiB,UAAWP,QC9C1BQ,MA1Bf,WAAgB,IAAD,EACqCC,mBAAS,IAD9C,mBACNC,EADM,KACa/C,EADb,OAEuB8C,mBAAS,SAFhC,mBAEN/C,EAFM,KAEMiD,EAFN,KAIPC,EAA+BC,mBAAQ,kBAAMlD,IAAsB,IAMzE,OACE,yBAAKmD,UAAU,OACb,kBAAC,eAAD,CAAcC,iBANS,SAACC,EAAOlC,GACjC6B,EAAcK,EAAMC,QAMlB,kBAAC,EAAD,CACE3D,MAAO,IACPC,OAAQ,IACRG,WAAYA,EACZC,qBAAsBiD,IAExB,uBAAGM,KAAMR,EAAmBS,SAAS,iBACnC,+CCdYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAAS2B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.aa5ab42a.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\n\nconst Canvas = ({\n  width,\n  height,\n  rowsNumber = 15,\n  columnsNumber = 15,\n  pixelColor,\n  setPixelImageDataUri,\n}) => {\n  const canvasRef = useRef(null)\n\n  useEffect(() => {\n    const ctx = canvasRef.current.getContext('2d')\n    ctx.fillStyle = 'white'\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.strokeStyle = 'black'\n    ctx.lineWidth = 1\n\n    for (let i = 1; i < rowsNumber; i++) {\n      const x = i * (width / rowsNumber)\n      ctx.beginPath()\n      ctx.moveTo(x, 0)\n      ctx.lineTo(x, height)\n      ctx.stroke()\n    }\n\n    for (let i = 1; i < columnsNumber; i++) {\n      const y = i * (width / columnsNumber)\n      ctx.beginPath()\n      ctx.moveTo(0, y)\n      ctx.lineTo(width, y)\n      ctx.stroke()\n    }\n  }, [columnsNumber, height, canvasRef, rowsNumber, width])\n\n  const handleMouseMove = event => {\n    let newPosX = event.clientX - canvasRef.current.getBoundingClientRect().left\n    let newPosY = event.clientY - canvasRef.current.getBoundingClientRect().top\n\n    const start = 0\n    const endX = canvasRef.current.offsetWidth\n    const endY = canvasRef.current.offsetHeight\n\n    if (newPosX < start) {\n      newPosX = 0\n    }\n\n    if (newPosY < start) {\n      newPosY = 0\n    }\n\n    if (newPosX > endX) {\n      newPosX = endX\n    }\n\n    if (newPosY > endY) {\n      newPosY = endY\n    }\n\n    const pixelSize = width / rowsNumber\n    const indexX = Math.floor(newPosX / pixelSize)\n    const indexY = Math.floor(newPosY / pixelSize)\n\n    const ctx = canvasRef.current.getContext('2d')\n    ctx.fillStyle = pixelColor\n    ctx.fillRect(indexX * pixelSize, indexY * pixelSize, pixelSize, pixelSize)\n    setPixelImageDataUri(canvasRef.current.toDataURL('image/png'))\n  }\n\n  const handleMouseUp = () => {\n    document.removeEventListener('mouseup', handleMouseUp)\n    document.removeEventListener('mousemove', handleMouseMove)\n  }\n\n  const handleMouseDown = () => {\n    document.addEventListener('mousemove', handleMouseMove)\n    document.addEventListener('mouseup', handleMouseUp)\n  }\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={width}\n      height={height}\n      style={{ background: 'white' }}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n\nexport default Canvas\n","import React, { useState, useMemo } from 'react'\nimport { CirclePicker } from 'react-color'\n\nimport './App.css'\nimport Canvas from './Canvas'\n\nfunction App() {\n  const [pixelImageDataUri, setPixelImageDataUri] = useState('')\n  const [pixelColor, setPixelColor] = useState('black')\n\n  const memoizedSetPixelImageDataUri = useMemo(() => setPixelImageDataUri, [])\n\n  const colorChangeHanlder = (color, event) => {\n    setPixelColor(color.hex)\n  }\n\n  return (\n    <div className=\"App\">\n      <CirclePicker onChangeComplete={colorChangeHanlder} />\n      <Canvas\n        width={500}\n        height={500}\n        pixelColor={pixelColor}\n        setPixelImageDataUri={memoizedSetPixelImageDataUri}\n      />\n      <a href={pixelImageDataUri} download=\"pixel-art.png\">\n        <button>Download</button>\n      </a>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}